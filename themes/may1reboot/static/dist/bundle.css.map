{"version":3,"sources":["webpack:///./static/scss/tools/_tools.font-face.scss","webpack:///./static/scss/settings/_settings.fonts.scss","webpack:///./static/scss/generic/_generic.reset.scss","webpack:///./static/scss/elements/_elements.html.scss","webpack:///./static/scss/tools/_tools.fonts.scss","webpack:///./static/scss/settings/_settings.colors.scss","webpack:///./static/scss/elements/_elements.links.scss","webpack:///./static/scss/components/_components.canvas.scss","webpack:///./static/scss/components/_components.loading.scss","webpack:///./static/scss/tools/_tools.clearfix.scss","webpack:///./static/scss/utilities/_utilities.typography.scss","webpack:///./static/scss/tools/_tools.poly-fluid.scss","webpack:///./static/scss/tools/_tools.breakpoints.scss"],"names":[],"mappings":"AAEI;EACI,uCAA4B;EAC5B,mDAAsD;EACtD,qNAEiE;EACjE,iBCPkF;EDQlF,mBATuG;;AAE3G;EACI,0CAA4B;EAC5B,sDAAsD;EACtD,8NAEiE;EACjE,oBARkF;EASlF,mBATuG;;AEA/G;;;;;;;;;;;;EAYI,UAAS;EACT,WAAU;EACV,UAAS;EACT,WAAU;EACV,gBAAe;EACf,yBAAwB;EACxB,wBAAuB;;AAG3B;EACI,cAAa;EACb,+BAAsB;UAAtB,uBAAsB;EACtB,yCAAwC;;AAG5C;EACI,eAAc;EACd,+BAA8B;EAC9B,mCAAkC;EAClC,oCAAmC;EACnC,mCAAkC;EAClC,sDD3B8C;;AC8BlD;;EAEI,eAAc;;AAGlB;EACI,iBAAgB;;AAGpB;EACI,aAAY;;AAGhB;;EAEI,YAAW;EACX,cAAa;;AAGjB;EACI,UAAS;EACT,WAAU;EACV,gBAAe;EACf,yBAAwB;EACxB,wBAAuB;;AAG3B;EACI,8BAA6B;;AAGjC;EACI,0BAAyB;EACzB,aAAY;;AAGhB;EACI,0BAAyB;EACzB,kBAAiB;;AAGrB;EACI,uBAAsB;;AAG1B;EACI,sBAAqB;;AClFzB;EC+EI,sDHzE8C;EG0E9C,oBAAmB;EANnB,gBAA0B;EAC1B,uBAAgD;EDxEhD,eEDW;EFEX,0BEHW;EFDf;IAOQ,OAAM;IACN,QAAO;IACP,SAAQ;IACR,gBAAe;;AAKvB;EACI,YAAW;EACX,aAAY;EACZ,oCAAmC;;AGlBvC;EACI,eAAc;EACd,sBAAqB;;ACFzB;EACI,mBAAkB;EAClB,QAAO;EACP,OAAM;EACN,aAAY;EACZ,YAAW;;AAKf;EACI,mBAAkB;EAClB,eAAc;EACd,YAAW;EACX,UAAS;EACT,WAAU;;ACfd;EACI,mBAAkB;EAClB,UAAS;EACT,QAAO;EACP,aAAY;EACZ,YAAW;EACX,iBAAgB;EAChB,qCAA4B;UAA5B,6BAA4B;EAE5B;IACI,iBAAgB;IAChB,gBAAe;IACf,OAAM;IACN,QAAO;IACP,YAAW;IACX,aAAY;IACZ,iBAAgB;IAChB,YAAW;;ACff;EACI,sBAAqB;;AAGzB;EACI,WAAU;;AAGd;EAEI,eAAc;EAFlB;IAKQ,UAAS;IACT,YAAW;IACX,aAAY;IACZ,cAAa;IACb,eAAc;IACd,mBAAkB;;ACpB9B;EACI,sDTK8C;EUW9C,gBDfiC;ECejC,kBDbmC;EAEnC,oBAAmB;EACnB,oBAAmB;ECcf;IDrBR;MCsBY,wCAkCkC,ID3C7C;ECQO;IDrBR;MCsBY,4BAkCkC,ID3C7C;ECcG;ID3BJ;MC4BQ,gBD1B0E,IAWjF;ECQO;IDrBR;MCsBY,0CAkCkC,ID3C7C;ECQO;IDrBR;MCsBY,8BAkCkC,ID3C7C;ECcG;ID3BJ;MC4BQ,kBDxB4E,IASnF;EEYW;IFzBZ;MAUQ,kBAAiB,IAGxB;;AAED;EACI,sDTV8C;EUW9C,gBDAiC;ECAjC,kBDEmC;EAEnC,oBAAmB;ECAf;IDNR;MCOY,wCAkCkC,IDlC7C;ECDO;IDNR;MCOY,4BAkCkC,IDlC7C;ECKG;IDZJ;MCaQ,gBDX0E,IAKjF;ECDO;IDNR;MCOY,gCAkCkC,IDlC7C;ECDO;IDNR;MCOY,2CAkCkC,IDlC7C;ECKG;IDZJ;MCaQ,kBDT4E,IAGnF;;AAED;EACI,mDTpBwC;EUYxC,gBDSiC;ECTjC,kBDWmC;EAEnC,sBAAqB;EACrB,oBAAmB;ECVf;IDGR;MCFY,wCAkCkC,IDnB7C;EChBO;IDGR;MCFY,4BAkCkC,IDnB7C;ECVG;IDHJ;MCIQ,gBDF0E,IAWjF;EChBO;IDGR;MCFY,0CAkCkC,IDnB7C;EChBO;IDGR;MCFY,8BAkCkC,IDnB7C;ECVG;IDHJ;MCIQ,kBDA4E,IASnF;EEZW;IFDZ;MAUQ,kBAAiB,IAGxB;;AAED;EACI,sDTlC8C;EUW9C,gBDwBiC;ECxBjC,kBD0BmC;EAEnC,oBAAmB;ECxBf;IDkBR;MCjBY,4BAkCkC,IDT7C;ECpBG;IDYJ;MCXQ,gBDamD,IAM1D;EC1BO;IDkBR;MCjBY,8BAkCkC,IDT7C;ECpBG;IDYJ;MCXQ,kBDeqD,IAI5D;;AAED;EACI,mDT7CwC;ES8CxC,gBAAe;EACf,kBAAiB;EACjB,oBAAmB","file":"bundle.css","sourcesContent":["@mixin font-face($font-name, $font-filename: $font-name, $version: 1, $font-weight: normal, $font-style: normal) {\n\n    @font-face {\n        font-family: '#{$font-name}';\n        src: url('../fonts/#{$font-filename}.eot?#{$version}');\n        src: url('../fonts/#{$font-filename}.eot?#{$version}#iefix') format('embedded-opentype'),\n        url('../fonts/#{$font-filename}.woff2?#{$version}') format('woff2'),\n        url('../fonts/#{$font-filename}.woff?#{$version}') format('woff');\n        font-weight: $font-weight;\n        font-style: $font-style\n    }\n\n}\n","// HANKEN-GROTESK\n@include font-face('SairaSemiCondensed-Bold', 'SairaSemiCondensed-Bold', $font-weight: 900);\n@include font-face('SairaSemiCondensed-Regular', 'SairaSemiCondensed-Regular');\n\n// FONT VARIABLES\n$bold: 'SairaSemiCondensed-Bold', sans-serif;\n$regular: 'SairaSemiCondensed-Regular', sans-serif;\n\n$base-size: 18;\n$base-line-height: 26;\n\n$font-primary: $regular;\n$font-secondary: $bold;\n","html, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, figcaption, figure,\nfooter, header, menu, nav, section, summary,\ntime, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    outline: 0;\n    font-size: 100%;\n    vertical-align: baseline;\n    background: transparent;\n}\n\n* {\n    outline: none;\n    box-sizing: border-box;\n    -webkit-tap-highlight-color: transparent;\n}\n\nbody {\n    line-height: 1;\n    -webkit-text-size-adjust: none;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: $font-primary;\n}\n\narticle, aside, details, figcaption, figure,\nfooter, header, menu, nav, section {\n    display: block;\n}\n\nnav ul {\n    list-style: none;\n}\n\nblockquote, q {\n    quotes: none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n    content: '';\n    content: none;\n}\n\na {\n    margin: 0;\n    padding: 0;\n    font-size: 100%;\n    vertical-align: baseline;\n    background: transparent;\n}\n\ndel {\n    text-decoration: line-through;\n}\n\nabbr[title], dfn[title] {\n    border-bottom: 1px dotted;\n    cursor: help;\n}\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n\ninput, select {\n    vertical-align: middle;\n}\n\nul, ol {\n    list-style-type: none;\n}\n","html {\n    @include font-default;\n    @include default-font-size;\n    color: $black;\n    background-color: $white;\n\n    &.is-locked {\n        top: 0;\n        left: 0;\n        right: 0;\n        position: fixed;\n    }\n\n}\n\nhtml, body {\n    width: 100%;\n    height: 100%;\n    -webkit-font-smoothing: antialiased;\n}\n","@function line-height($fontSize, $lineHeight: $fontSize) {\n    @return $lineHeight/$fontSize;\n}\n\n@function em($pixels, $context: getDefaultFontSize()) {\n    @if (unitless($pixels)) {\n        $pixels: $pixels * 1px;\n    }\n    @if (unitless($context)) {\n        $context: $context * 1px;\n    }\n    @return $pixels / $context * 1em;\n}\n\n@function rem($pixels, $context: getDefaultFontSize()) {\n    @if (unitless($pixels)) {\n        $pixels: $pixels * 1px;\n    }\n    @if (unitless($context)) {\n        $context: $context * 1px;\n    }\n    @return $pixels / $context * 1rem;\n}\n\n@mixin font-map($mapKey: 'default', $unit: getDefaultFontSizeUnit()) {\n\n    @each $breakpoint, $font-size in getFontMap($mapKey) {\n\n        @if $breakpoint == null {\n\n            $fs: $font-size;\n\n            @if type-of($font-size) == 'string' {\n                $fs: number(nth(str-two-split($font-size, '/'), 1));\n                $lh: number(nth(str-two-split($font-size, '/'), 2));\n                line-height: line-height($fs, $lh);\n            }\n\n            @if $unit == rem {\n                font-size: rem($fs);\n            } @else if $unit == em {\n                font-size: em($fs);\n            } @else {\n                font-size: $fs#{$unit};\n            }\n\n        } @else {\n\n            @include mq($to: $breakpoint) {\n\n                $fs: $font-size;\n\n                @if type-of($font-size) == 'string' {\n                    $fs: number(nth(str-two-split($font-size, '/'), 1));\n                    $lh: number(nth(str-two-split($font-size, '/'), 2));\n                    line-height: line-height($fs, $lh);\n                }\n\n                @if $unit == rem {\n                    font-size: rem($fs);\n                } @else if $unit == em {\n                    font-size: em($fs);\n                } @else {\n                    font-size: $fs#{$unit};\n                }\n\n            }\n\n        }\n    }\n\n}\n\n@mixin default-font-size {\n    font-size: $base-size + px;\n    line-height: ($base-line-height/$base-size) + em;\n}\n\n@mixin font-default($fontWeight: 'default') {\n    font-family: $font-primary;\n    font-weight: normal;\n}\n","// COLORS\n$white: #ffffff;\n$black: #000000;\n$black-0: rgba(#000000, 0);\n$black-10: rgba(#000000, 0.1);\n$black-20: rgba(#000000, 0.2);\n$black-30: rgba(#000000, 0.3);\n$black-40: rgba(#000000, 0.4);\n$black-50: rgba(#000000, 0.5);\n$black-60: rgba(#000000, 0.6);\n$black-70: rgba(#000000, 0.7);\n$black-80: rgba(#000000, 0.8);\n$black-90: rgba(#000000, 0.9);\n$black-100: rgba(#000000, 1);\n$mango: #f7b334;\n$slate: #3c5163;\n\n// COLORS - RE-ASSIGNING\n$primary-color: $mango;\n$secondary-color: $slate;\n$tertiary-color: $white;\n\n// COLORS - COMPONENTS\n\n","a {\n    color: inherit;\n    text-decoration: none;\n}",".c-canvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 100%;\n    width: 100%;\n}\n\n\n// TODO: remove this\nbutton {\n    position: absolute;\n    display: block;\n    z-index: 99;\n    top: 30px;\n    left: 30px;\n}\n",".c-loading {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    height: 10px;\n    width: 100%;\n    background: #aaa;\n    transform: translateX(-100%);\n\n    &__overlay {\n        overflow: hidden;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: #333;\n        z-index: 10;\n    }\n}\n","@mixin clearfix-global($className: 'clearfix') {\n\n    .#{$className} {\n        display: inline-block;\n    }\n\n    * html .#{$className} {\n        height: 1%;\n    }\n\n    .#{$className} {\n\n        display: block;\n\n        &:after {\n            height: 0;\n            clear: both;\n            font-size: 0;\n            content: \"\\A\";\n            display: block;\n            visibility: hidden;\n        }\n\n    }\n\n}\n\n@mixin clearfix($display: block) {\n\n    display: $display;\n\n    &:after {\n        height: 0;\n        clear: both;\n        font-size: 0;\n        content: \"\\A\";\n        display: block;\n        visibility: hidden;\n    }\n\n}",".u-a3 {\n    font-family: $font-primary;\n    $font-size: ($breakpoint-sm: 35px, $breakpoint-xl: 78px, $breakpoint-xxl: 78px);\n    @include poly-fluid-sizing('font-size', $font-size);\n    $line-height: ($breakpoint-sm: 43px, $breakpoint-xl: 86px, $breakpoint-xxl: 86px);\n    @include poly-fluid-sizing('line-height', $line-height);\n    letter-spacing: 2px;\n    font-weight: normal;\n\n    @include mq(sm) {\n        letter-spacing: 0;\n    }\n\n}\n\n.u-a2 {\n    font-family: $font-primary;\n    $font-size: ($breakpoint-sm: 35px, $breakpoint-xl: 50px, $breakpoint-xxl: 50px);\n    @include poly-fluid-sizing('font-size', $font-size);\n    $line-height: ($breakpoint-sm: 43px, $breakpoint-xl: 66px, $breakpoint-xxl: 56px);\n    @include poly-fluid-sizing('line-height', $line-height);\n    font-weight: normal;\n}\n\n.u-a1 {\n    font-family: $font-secondary;\n    $font-size: ($breakpoint-sm: 14px, $breakpoint-xl: 18px, $breakpoint-xxl: 18px);\n    @include poly-fluid-sizing('font-size', $font-size);\n    $line-height: ($breakpoint-sm: 20px, $breakpoint-xl: 26px, $breakpoint-xxl: 26px);\n    @include poly-fluid-sizing('line-height', $line-height);\n    letter-spacing: 0.3px;\n    font-weight: normal;\n\n    @include mq(sm) {\n        letter-spacing: 0;\n    }\n\n}\n\n.u-b0 {\n    font-family: $font-primary;\n    $font-size: ($breakpoint-sm: 16px, $breakpoint-xl: 16px);\n    @include poly-fluid-sizing('font-size', $font-size);\n    $line-height: ($breakpoint-sm: 23px, $breakpoint-xl: 23px);\n    @include poly-fluid-sizing('line-height', $line-height);\n    font-weight: normal;\n\n}\n\n.u-b1 {\n    font-family: $font-secondary;\n    font-size: 13px;\n    line-height: 19px;\n    font-weight: normal;\n}\n","///////////////////////////////////////////////////////////////////////////\n// Poly Fluid Sizing\n///////////////////////////////////////////////////////////////////////////\n@mixin poly-fluid-sizing($property, $map) {\n    // Get the number of provided breakpoints\n    $length: length(map-keys($map));\n\n    // Error if the number of breakpoints is < 2\n    @if ($length < 2) {\n        @error \"poly-fluid-sizing() $map requires at least values\"\n    }\n\n    // Sort the map by viewport width (key)\n    $map: map-sort($map);\n    $keys: map-keys($map);\n\n    // Minimum size\n    #{$property}: map-get($map, nth($keys,1));\n\n    // Interpolated size through breakpoints\n    @for $i from 1 through ($length - 1) {\n        @media (min-width:nth($keys,$i)) {\n            #{$property}: linear-interpolation((nth($keys,$i): map-get($map, nth($keys,$i)), nth($keys,($i+1)): map-get($map, nth($keys,($i + 1)))));\n        }\n    }\n\n    // Maxmimum size\n    @media (min-width:nth($keys,$length)) {\n        #{$property}: map-get($map, nth($keys,$length));\n    }\n}\n\n/// linear-interpolation\n/// Calculate the definition of a line between two points\n/// @param $map - A SASS map of viewport widths and size value pairs\n/// @returns A linear equation as a calc() function\n/// @example\n///   font-size: linear-interpolation((320px: 18px, 768px: 26px));\n@function linear-interpolation($map) {\n    $keys: map-keys($map);\n    @if (length($keys) != 2) {\n        @error \"linear-interpolation() $map must be exactly 2 values\";\n    }\n    // The slope\n    $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/(nth($keys, 2) - nth($keys,1));\n\n    // The y-intercept\n    $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);\n\n    // Determine if the sign should be positive or negative\n    $sign: \"+\";\n    @if ($b < 0) {\n        $sign: \"-\";\n        $b: abs($b);\n    }\n\n    @return calc(#{$m*100}vw #{$sign} #{$b});\n}\n\n/// list-sort\n/// Sort a SASS list\n/// @param $list - A SASS list\n/// @returns A sorted SASS list\n/// @requires function list-remove\n@function list-sort($list) {\n    $sortedlist: ();\n    @while length($list) > 0 {\n        $value: nth($list,1);\n        @each $item in $list {\n            @if $item < $value {\n                $value: $item;\n            }\n        }\n        $sortedlist: append($sortedlist, $value, 'space');\n        $list: list-remove($list, index($list, $value));\n    }\n    @return $sortedlist;\n}\n\n/// map-sort\n/// Sort map by keys\n/// @param $map - A SASS map\n/// @returns A SASS map sorted by keys\n/// @requires function list-sort\n@function map-sort($map) {\n    $keys: list-sort(map-keys($map));\n    $sortedMap: ();\n    @each $key in $keys {\n        $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));\n    }\n    @return $sortedMap;\n}\n\n/// list-remove\n/// Remove an item from a list\n/// @param $list - A SASS list\n/// @param $index - The list index to remove\n/// @returns A SASS list\n@function list-remove($list, $index) {\n    $newList: ();\n    @for $i from 1 through length($list) {\n        @if $i != $index {\n            $newList: append($newList, nth($list,$i), 'space');\n        }\n    }\n    @return $newList;\n}\n","@function getBreakpoint($breakpointKey) {\n    @return map-get($settings-breakpoints, $breakpointKey);\n}\n\n@mixin mq($to: null, $from: null, $and: null) {\n\n    @if $from != null and $to != null {\n\n        @if $and != null {\n            @media (min-width: getBreakpoint($from)) and (max-width: getBreakpoint($to)) and ($and) {\n                @content;\n            }\n        } @else {\n            @media (min-width: getBreakpoint($from)) and (max-width: getBreakpoint($to)) {\n                @content;\n            }\n        }\n\n    } @else if $to != null {\n\n        @if $and != null {\n            @media (max-width: getBreakpoint($to)) and ($and) {\n                @content;\n            }\n        } @else {\n            @media (max-width: getBreakpoint($to)) {\n                @content;\n            }\n        }\n\n    } @else if $from != null {\n\n        @if $and != null {\n            @media (min-width: getBreakpoint($from)) and ($and) {\n                @content;\n            }\n        } @else {\n            @media (min-width: getBreakpoint($from)) {\n                @content;\n            }\n        }\n\n    }\n\n}"],"sourceRoot":""}